// Generated by CoffeeScript 1.6.3
var MongooseEndlessScroll;

MongooseEndlessScroll = (function() {
  var DEFAULTS, DIRECTION_DOWN, DIRECTION_UP;

  DIRECTION_UP = "before";

  DIRECTION_DOWN = "after";

  DEFAULTS = {
    itemsToKeep: null,
    inflowPixels: 50,
    intervalFrequency: 250,
    autoStart: true,
    htmlLoading: "Loading...",
    htmlEnableScrollUp: "&uarr; More",
    htmlEnableScrollDown: "&darr; More",
    htmlDisableScrollUp: "~ No More ~",
    htmlDisableScrollDown: "~ No More ~",
    formatItem: function(item) {
      return "<a href=\"/tickets/" + item._id + "\" class=\"list-group-item\" id=\"" + item._id + "\">\n  <div class=\"row\"><div class=\"col-md-1\">\n    <span class=\"label label-success\">" + item.status + "</span>\n  </div>\n  <div class=\"col-md-2\"><small><code>" + item._id + "</code></small></div>\n  <div class=\"col-md-5\">" + item.title + "</div>\n  <div class=\"col-md-1\">" + item.category + "</div>\n  <div class=\"col-md-1 text-right\"><small title=\"2014-03-07T09:11:34.813Z\" class=\"muted timeago\">" + item.created_at + "</small></div>\n  <div class=\"col-md-1 text-right\"><small title=\"2014-03-07T09:11:52.074Z\" class=\"muted timeago\">" + item.updated_at + "</small></div>\n  <div class=\"col-md-1\">" + item.attempts + "</div></div></a>";
    }
  };

  function MongooseEndlessScroll(scope, options) {
    var _this = this;
    this.options = $.extend({}, DEFAULTS, options);
    this.container = $(options.container);
    this.elControlUp = this.options.elControlUp;
    this.elControlUp.click(function() {
      return _this.fetchPrev();
    });
    this.elControlDown = this.options.elControlDown;
    this.elControlDown.click(function() {
      return _this.fetchNext();
    });
    this.topmostId = null;
    this.downmonstId = null;
    this.idToData = {};
    this.ids = [];
    this.showLoading(false);
    console.log("[jquery.mongoose-endless-scroll::options]");
    console.dir(options);
    $(document).ready(function() {
      if (_this.options.autoStart) {
        return _this.fetchNext();
      }
    });
    return;
  }

  MongooseEndlessScroll.prototype.fetchNext = function() {
    var data;
    data = {};
    data[DIRECTION_DOWN] = this.ids[this.ids.length - 1];
    this.fetch(data);
  };

  MongooseEndlessScroll.prototype.fetchPrev = function() {
    var data;
    data = {};
    data[DIRECTION_UP] = this.ids[0];
    this.fetch(data);
  };

  MongooseEndlessScroll.prototype.showLoading = function(val) {
    console.log("[jquery.mongoose-endless-scroll::@topmostId:" + this.topmostId + ", @bottomostId:" + this.bottomostId + "]");
    this.isFecthing = Boolean(val);
    if (this.isFecthing) {
      this.elControlDown.html(this.options.htmlLoading);
      return this.elControlUp.html(this.options.htmlLoading);
    } else {
      this.elControlUp.html(this.topmostId ? this.options.htmlDisableScrollUp : this.options.htmlEnableScrollUp);
      return this.elControlDown.html(this.bottomostId ? this.options.htmlDisableScrollDown : this.options.htmlEnableScrollDown);
    }
  };

  MongooseEndlessScroll.prototype.fetch = function(data) {
    var ajaxOptions,
      _this = this;
    if (this.isFecthing) {
      console.log("[jquery.mongoose-endless-scroll::fetch] in fetching");
      return;
    }
    if ((data[DIRECTION_DOWN] === this.downmonstId) || (data[DIRECTION_UP] === this.topmostId)) {
      console.log("[jquery.mongoose-endless-scroll::fetch] reach boundary");
      return;
    }
    this.showLoading(true);
    ajaxOptions = {
      dataType: "json",
      url: this.options.serviceUrl,
      data: data,
      success: function(res, textStatus) {
        var currentDirection, diff, item, pos;
        _this.showLoading(false);
        currentDirection = data[DIRECTION_DOWN] != null ? DIRECTION_DOWN : DIRECTION_UP;
        res.results || (res.results = []);
        pos = 0;
        while (pos < res.results.length) {
          item = res.results[pos];
          if (~_this.ids.indexOf(item._id)) {
            console.log("[jquery.mongoose-endless-scroll::remove duplicate] id:" + item._id);
            res.results.splice(pos, 1);
          } else {
            ++pos;
          }
        }
        if (!(Array.isArray(res.results) && res.results.length)) {
          if (currentDirection === DIRECTION_DOWN) {
            _this.downmonstId = data[DIRECTION_DOWN];
            _this.elControlDown.html(_this.options.htmlDisableScrollDown);
          } else {
            _this.topmostId = data[DIRECTION_UP];
            _this.elControlUp.html(_this.options.htmlDisableScrollUp);
          }
          console.log("[jquery.mongoose-endless-scroll::reach boundary] @topmostId:" + _this.topmostId + ", @downmonstId:" + _this.downmonstId);
          return;
        }
        _this.addInResults(res.results, currentDirection);
        if (currentDirection === DIRECTION_DOWN) {
          _this.renderBottomPartial();
        } else {
          _this.renderTopPartial();
        }
        if (_this.options.itemsToKeep > 0 && (diff = _this.ids.length - _this.options.itemsToKeep) > 0) {
          _this.clearRedundancy(diff, currentDirection);
        }
      },
      error: function(jqXHR, textStatus, err) {
        console.log("[jquery.mongoose-endless-scroll::error] err:" + err);
        _this.container.trigger("mescroll_error", err);
        _this.showLoading(false);
      }
    };
    $.ajax(ajaxOptions);
  };

  MongooseEndlessScroll.prototype.clearRedundancy = function(count, direction) {
    var id;
    console.log("[jquery.mongoose-endless-scroll::clearRedundancy] count:" + count + ", direction:" + direction);
    while (count > 0) {
      id = direction === DIRECTION_DOWN ? this.ids.shift() : this.ids.pop();
      delete this.idToData[id];
      $("#" + id).remove();
      --count;
    }
    if (direction === DIRECTION_DOWN) {
      this.topmostId = null;
      this.showLoading(false);
    } else {
      this.bottomostId = null;
      this.showLoading(false);
    }
  };

  MongooseEndlessScroll.prototype.addInResults = function(results, direction) {
    var id, result, _i, _len;
    if (direction === DIRECTION_UP) {
      results.reverse();
    }
    for (_i = 0, _len = results.length; _i < _len; _i++) {
      result = results[_i];
      id = result._id;
      if (~this.ids.indexOf(id)) {
        continue;
      }
      if (direction === DIRECTION_DOWN) {
        this.ids.push(id);
      } else {
        this.ids.unshift(id);
      }
      this.idToData[id] = result;
    }
  };

  MongooseEndlessScroll.prototype.getDisplayedTopmostId = function() {
    return $("" + this.container.selector + " a").first().attr("id");
  };

  MongooseEndlessScroll.prototype.getDisplayedBottommostId = function() {
    return $("" + this.container.selector + " a").last().attr("id");
  };

  MongooseEndlessScroll.prototype.renderTopPartial = function() {
    var pos, topmostId, _results;
    topmostId = this.getDisplayedTopmostId();
    pos = this.ids.indexOf(topmostId) - 1;
    if (pos < -1) {
      pos = this.ids.length - 1;
    }
    _results = [];
    while (pos > -1) {
      this.container.prepend(this.options.formatItem(this.idToData[this.ids[pos]]));
      _results.push(--pos);
    }
    return _results;
  };

  MongooseEndlessScroll.prototype.renderBottomPartial = function() {
    var bottomostId, pos, _results;
    bottomostId = this.getDisplayedBottommostId();
    pos = this.ids.indexOf(bottomostId);
    if (pos < -1) {
      pos = 0;
    }
    _results = [];
    while (pos < this.ids.length) {
      this.container.append(this.options.formatItem(this.idToData[this.ids[pos]]));
      _results.push(++pos);
    }
    return _results;
  };

  return MongooseEndlessScroll;

})();

(function($) {
  return $.fn.mongooseEndlessScroll = function(options) {
    return new MongooseEndlessScroll(this, options);
  };
})(jQuery);
