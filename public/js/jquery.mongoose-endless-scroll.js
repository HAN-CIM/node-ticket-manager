// Generated by CoffeeScript 1.6.3
var MongooseEndlessScroll;

MongooseEndlessScroll = (function() {
  var DEFAULTS;

  DEFAULTS = {
    inflowPixels: 50,
    intervalFrequency: 250
  };

  function MongooseEndlessScroll(scope, options) {
    var scrollListener,
      _this = this;
    this.options = $.extend({}, DEFAULTS, options);
    this.container = $(options.container);
    this.elLoadingPrev = this.options.elLoadingPrev;
    this.elLoadingPrev.click(function() {
      return _this.fetchPrev();
    });
    this.elLoadingNext = this.options.elLoadingNext;
    this.elLoadingNext.click(function() {
      return _this.fetchNext();
    });
    this.isFecthing = false;
    console.log("[jquery.mongoose-endless-scroll::options]");
    console.dir(options);
    scrollListener = function() {
      return $(window).one("scroll", function() {
        if ($(window).scrollTop() >= $(document).height() - $(window).height() - _this.options.inflowPixels) {
          _this.fetchNext();
        } else if ($(window).scrollTop() <= _this.options.inflowPixels) {
          _this.fetchPrev();
        }
        return setTimeout(scrollListener, _this.options.intervalFrequency);
      });
    };
    $(document).ready(function() {
      return scrollListener();
    });
  }

  MongooseEndlessScroll.prototype.fetchNext = function() {
    var data,
      _this = this;
    console.log("[jquery.mongoose-endless-scroll::fetchNext] @options.inflowPixels:" + this.options.inflowPixels);
    $(window).scrollTop($(document).height() - $(window).height() - this.options.inflowPixels);
    if (this.isFecthing) {
      return;
    }
    data = {};
    return $.getJSON(this.options.serviceUrl, data, function(data, textStatus) {
      console.log("[jquery.mongoose-endless-scroll::receive] textStatus:" + textStatus + ", data:" + data);
      _this.isFecthing = false;
    });
  };

  MongooseEndlessScroll.prototype.fetchPrev = function() {
    console.log("[jquery.mongoose-endless-scroll::fetchPrev] ");
    $(window).scrollTop(this.options.inflowPixels);
    if (this.isFecthing) {

    }
  };

  MongooseEndlessScroll.prototype.fetch = function(direction) {};

  MongooseEndlessScroll.prototype.content = function(fireSequence, pageSequence, scrollDirection) {
    var options;
    console.log("[jquery.mongoose-endless-scroll::content] %j:, serviceUrl:%j", arguments, this.serviceUrl);
    options = {
      dataType: "json",
      url: this.serviceUrl,
      data: {},
      success: function(data, textStatus) {
        console.log("[jquery.mongoose-endless-scroll::getJSON] data:");
        return console.dir(data);
      }
    };
    return $.ajax(options);
  };

  MongooseEndlessScroll.prototype.callback = function(fireSequence, pageSequence, scrollDirection) {
    return console.log("[jquery.mongoose-endless-scroll::callback] %j:", arguments);
  };

  MongooseEndlessScroll.prototype.ceaseFire = function(fireSequence, pageSequence, scrollDirection) {
    return false;
  };

  return MongooseEndlessScroll;

})();

(function($) {
  return $.fn.mongooseEndlessScroll = function(options) {
    return new MongooseEndlessScroll(this, options);
  };
})(jQuery);
