// Generated by CoffeeScript 1.6.3
(function() {
  var DEFAULT_BASIC_AUTH, DEFAULT_TIMEOUT, DEFAULT_WATCH_INTERVAL, EventEmitter, PATH_FOR_REQUIRE_TICKET, TicketWorker, assert, env, request,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  assert = require("assert");

  env = process.env.NODE_ENV || 'development';

  DEFAULT_BASIC_AUTH = require('./config/config')[env]['basicAuth'];

  EventEmitter = require('events').EventEmitter;

  request = require("request");

  PATH_FOR_REQUIRE_TICKET = "/api/tickets/assign";

  DEFAULT_TIMEOUT = 20 * 60 * 1000;

  DEFAULT_WATCH_INTERVAL = 1000;

  TicketWorker = (function(_super) {
    __extends(TicketWorker, _super);

    function TicketWorker(options) {
      if (options == null) {
        options = {};
      }
      assert((this.name = options.name), "missing id");
      assert((this.id = options.id), "missing id");
      assert((this.consumerSecret = options.consumer_secret), "missing consumer secret");
      assert((this.watchCategory = options.category), "missing category to watch");
      assert((this.host = options.host), "missing host");
      this.oauth = {
        consumer_key: this.id,
        consumer_secret: this.consumerSecret
      };
      this.timeout = options.timeout || DEFAULT_TIMEOUT;
      this.interval = options.interval || DEFAULT_WATCH_INTERVAL;
      this.basicAuth = options.basicAuth || DEFAULT_BASIC_AUTH;
      this.ticket = null;
      this.debuglog = require("debug")("ticketman:TicketWorker" + this.name);
      this.commenceAt = 0;
      setInterval(this.watch, this.timeout);
    }

    TicketWorker.prototype.isBusy = function() {
      return this.ticket != null;
    };

    TicketWorker.prototype.watch = function() {
      this.debuglog("watch: isBusy:" + this.isBusy);
      if (this.isBusy()) {
        if (Date.now() > this.timeout + this.commenceAt) {
          this.doTimeout();
        }
      } else {
        this.requireTicket();
      }
    };

    TicketWorker.prototype.requireTicket = function(callback) {
      var options;
      this.debuglog("requireTicket");
      if (this.isBusy()) {
        return;
      }
      options = {
        method: 'PUT',
        auth: this.basicAuth,
        url: "" + this.host + PATH_FOR_REQUIRE_TICKET,
        oauth: this.oauth,
        json: {
          category: "test api"
        }
      };
      request(options, function(err, res, ticket) {
        this.debuglog("requireTicket: err:" + err + ", res.statusCode:" + res.statusCode + ", ticket:%j", ticket);
        if (err != null) {
          return this.debuglog("requireTicket: err: " + err);
        }
        if (res.statusCode !== 200) {
          return this.debuglog("requireTicket: request failed, server status: " + res.statusCode);
        }
        if (ticket == null) {
          return this.debuglog("requireTicket: no more ticket");
        }
        if (ticket._id) {
          ticket.id = ticket._id;
        }
        this.ticket = ticket;
        this.emit("new ticket", ticket);
        if (callback != null) {
          callback(err, ticket);
        }
      });
    };

    TicketWorker.prototype.doTimeout = function() {
      this.debuglog("doTimeout, @ticket:%j", this.ticket);
      this.emit("timeout", this.ticket);
      this.ticket = null;
    };

    TicketWorker.prototype.complete = function() {
      var options;
      if (!this.isBusy()) {
        return;
      }
      options = {
        method: 'PUT',
        auth: this.basicAuth,
        oauth: this.oauth,
        url: "" + HOST + "/api/tickets/" + this.ticket.id + "/complete"
      };
      request(options, function(err, res, ticket) {
        this.debuglog("complete: err:" + err + ", res.statusCode:" + res.statusCode + ", ticket:%j", ticket);
      });
      this.ticket = null;
    };

    TicketWorker.prototype.update = function(message, kind) {
      var options;
      if (kind == null) {
        kind = 'default';
      }
      if (!isBusy()) {
        return this.debuglog("update: ERROR: current has no ticket. message:" + message);
      }
      options = {
        method: 'PUT',
        auth: this.basicAuth,
        oauth: this.oauth,
        url: "" + HOST + "/api/tickets/" + this.ticket._id + "/comment",
        json: {
          kind: kind,
          content: message
        }
      };
      request(options, function(err, res, ticket) {
        this.debuglog("update: err:" + err + ", res.statusCode:" + res.statusCode + ", ticket:%j", ticket);
      });
    };

    TicketWorker.prototype.giveup = function() {
      var options;
      if (!this.isBusy()) {
        return;
      }
      options = {
        method: 'PUT',
        auth: this.basicAuth,
        oauth: this.oauth,
        url: "" + HOST + "/api/tickets/" + this.ticket.id + "/giveup"
      };
      request(options, function(err, res, ticket) {
        this.debuglog("giveup: err:" + err + ", res.statusCode:" + res.statusCode + ", ticket:%j", ticket);
      });
      this.ticket = null;
    };

    return TicketWorker;

  })(EventEmitter);

  module.exports = TicketWorker;

}).call(this);
