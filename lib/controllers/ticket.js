// Generated by CoffeeScript 1.6.3
(function() {
  var STATUS, Ticket, debuglog, mongoose;

  mongoose = require('mongoose');

  Ticket = mongoose.model('Ticket');

  STATUS = require("../enums/ticket_status");

  debuglog = require("debug")("ticketman:controller:ticket");

  exports.index = function(req, res, next) {
    debuglog("index");
    res.render('tickets/index', {
      title: 'All Tickets',
      tickets: []
    });
  };

  exports.list = function(req, res, next) {
    var query;
    debuglog("list req.query: %j", req.query);
    query = Ticket.paginate(req.query || {}, '_id').select('-comments -content');
    if (req.query.before != null) {
      query.sort({
        _id: "asc"
      });
    } else {
      query.sort({
        _id: "desc"
      });
    }
    query.execPagination(function(err, result) {
      if (err != null) {
        return next(err);
      }
      result.success = true;
      console.log("[ticket::list] dump result:");
      console.dir(result);
      return res.json(result);
    });
  };

  exports.show = function(req, res, next) {
    var id;
    debuglog("show");
    id = String(req.params.id || '');
    if (id == null) {
      return next();
    }
    Ticket.findById(id, function(err, ticket) {
      if (err != null) {
        return next(err);
      }
      res.render('tickets/show', {
        title: 'All Tickets',
        ticket: ticket
      });
    });
  };

  exports.create = function(req, res, next) {
    var ticket,
      _this = this;
    debuglog("create");
    ticket = new Ticket(req.body);
    ticket.save(function(err) {
      if (err != null) {
        return res.json({
          success: false,
          error: err.toString()
        });
      } else {
        return res.json({
          success: true,
          ticket: ticket
        });
      }
    });
  };

  exports.assign = function(req, res, next) {
    debuglog("assign, req.worker:%j", req.worker);
    req.body.worker = req.worker.name;
    Ticket.arrangeAssignment(req.body, function(err, ticket) {
      if (err != null) {
        return next(err);
      }
      if (ticket == null) {
        return res.json({
          success: false,
          error: "no pending ticket of " + req.body.category
        });
      }
      return res.json({
        success: true,
        ticket: ticket
      });
    });
  };

  exports.comment = function(req, res, next) {
    var id;
    id = req.params.id || '';
    if (id == null) {
      return next();
    }
    req.body.name = req.worker.name;
    Ticket.addComment(id, req.body, function(err, ticket) {
      if (err != null) {
        return next(err);
      }
      if (ticket == null) {
        return res.json({
          success: false,
          error: "no commented ticket of " + id
        });
      }
      return res.json({
        success: true,
        ticket: ticket
      });
    });
  };

  exports.complete = function(req, res, next) {
    var id;
    id = String(req.params.id || '');
    if (id == null) {
      return next();
    }
    req.body.id = id;
    Ticket.changeStatus(req.body, STATUS.COMPLETE, function(err, ticket) {
      if (err != null) {
        return next(err);
      }
      if (ticket == null) {
        return next();
      }
      return res.json(ticket);
    });
  };

  exports.giveup = function(req, res, next) {
    var comment, id;
    id = String(req.params.id || '');
    if (id == null) {
      return next();
    }
    req.body.id = id;
    comment = {
      name: req.body.name || req.worker.name,
      kind: "danger",
      content: req.body.reason || ("" + req.worker.name + " fail to process this ticket")
    };
    Ticket.addComment(id, comment, function(err, ticket) {
      if (err != null) {
        return next(err);
      }
      if (ticket == null) {
        return res.json({
          success: false,
          error: "missing ticket of " + id
        });
      }
      Ticket.changeStatus(req.body, STATUS.PENDING, function(err, ticket) {
        if (err != null) {
          return next(err);
        }
        if (ticket == null) {
          return next();
        }
        ticket.update({
          $inc: {
            attempts: 1
          }
        }, function(err, numberAffected) {
          if (err != null) {
            return next(err);
          }
          ticket.attempts = numberAffected;
          return res.json(ticket);
        });
      });
    });
  };

  exports.abandon = function(req, res, next) {
    var id;
    id = String(req.params.id || '');
    if (id == null) {
      return next();
    }
    Ticket.findById(id, function(err, ticket) {
      if (err != null) {
        return next(err);
      }
      if (ticket == null) {
        return next();
      }
      if (ticket.status !== STATUS.PENDING) {
        return next(new Error("only pending ticket could be abandoned"));
      }
      Ticket.changeStatus({
        id: ticket.id
      }, STATUS.ABANDON, function(err, ticket) {
        if (err != null) {
          return next(err);
        }
        if (ticket == null) {
          return next();
        }
        return res.redirect("/tickets");
      });
    });
  };

  exports.adminComment = function(req, res, next) {
    var id;
    id = String(req.params.id || '');
    if (id == null) {
      return next();
    }
    req.body.content = req.body.content.trim();
    console.log("[ticket::==========] req.body.content:" + req.body.content);
    if (!req.body.content) {
      return next(new Error("please say something"));
    }
    req.body.kind = "warning";
    req.body.name = "admin";
    Ticket.addComment(id, req.body, function(err, ticket) {
      if (err != null) {
        return next(err);
      }
      if (ticket == null) {
        return next();
      }
      return res.redirect("/tickets/" + id);
    });
  };

}).call(this);
