// Generated by CoffeeScript 1.6.3
/*
# test for api
*/


(function() {
  var HOST, TICKET_HELD_BY_WORKER, TIMESTAMP, config, request, should;

  should = require("should");

  request = require("request");

  config = require("../config/config")['development'];

  HOST = "http://localhost:3456";

  TIMESTAMP = Date.now();

  TICKET_HELD_BY_WORKER = null;

  describe("test api", function() {
    before(function() {});
    describe("/api/tickets/new", function() {
      var path;
      path = "/api/tickets/new";
      it("should create ticket", function(done) {
        var options, owner, title;
        title = "title of ticket " + TIMESTAMP;
        owner = "admin";
        options = {
          method: 'POST',
          url: "" + HOST + path,
          auth: config.basicAuth,
          json: {
            title: title,
            owner_id: owner,
            category: "test api",
            content: {
              detailed: "content of ticket",
              mixed: ["data"]
            }
          }
        };
        return request(options, function(err, res, body) {
          should.not.exist(err);
          should.exist(res);
          res.statusCode.should.eql(200);
          should.exist(body);
          body.title.should.eql(title);
          body.owner_id.should.eql(owner);
          return done();
        });
      });
      return it("fail to create duplicate ticket", function(done) {
        var options, owner, title;
        title = "title of ticket " + TIMESTAMP;
        owner = "admin";
        options = {
          method: 'POST',
          auth: config.basicAuth,
          url: "" + HOST + path,
          json: {
            title: title,
            owner_id: owner,
            category: "test api",
            content: {
              detailed: "content of ticket",
              mixed: ["data"]
            }
          }
        };
        return request(options, function(err, res, body) {
          console.log("[api_test] \n\t\terr:%j \n\t\tres:%j \n\t\tbody:%j", err, res.statusCode, body);
          should.not.exist(err);
          should.exist(res);
          res.statusCode.should.not.eql(200);
          return done();
        });
      });
    });
    describe("/api/tickets/assign", function() {
      var path;
      path = "/api/tickets/assign";
      return it("assign ticket to worker", function(done) {
        var options;
        options = {
          method: 'PUT',
          auth: config.basicAuth,
          url: "" + HOST + path,
          json: {
            worker: "test worker",
            category: "test api"
          }
        };
        return request(options, function(err, res, ticket) {
          console.log("[api_test] \n\t\terr:%j \n\t\tres:%j \n\t\tbody:%j", err, res.statusCode, ticket);
          should.not.exist(err);
          should.exist(res);
          res.statusCode.should.eql(200);
          TICKET_HELD_BY_WORKER = ticket;
          return done();
        });
      });
    });
    describe('/api/tickets/:id/comment', function() {
      return it("add comment to ticket", function(done) {
        var options;
        options = {
          method: 'PUT',
          auth: config.basicAuth,
          url: "" + HOST + "/api/tickets/" + TICKET_HELD_BY_WORKER._id + "/comment",
          json: {
            name: "worker",
            kind: "info",
            content: "test info comment"
          }
        };
        return request(options, function(err, res, ticket) {
          console.log("[api_test] \n\t\terr:%j \n\t\tres:%j \n\t\tbody:%j", err, res.statusCode, ticket);
          should.not.exist(err);
          res.statusCode.should.eql(200);
          options.json.kind = "warning";
          options.json.content = "test warning comment";
          return request(options, function(err, res, ticket) {
            console.log("[api_test] \n\t\terr:%j \n\t\tres:%j \n\t\tbody:%j", err, res.statusCode, ticket);
            should.not.exist(err);
            res.statusCode.should.eql(200);
            return done();
          });
        });
      });
    });
    describe('/api/tickets/:id/complete', function() {
      return it("complete a task", function(done) {
        var options;
        options = {
          method: 'PUT',
          auth: config.basicAuth,
          url: "" + HOST + "/api/tickets/" + TICKET_HELD_BY_WORKER._id + "/complete",
          json: {
            name: "worker"
          }
        };
        return request(options, function(err, res, ticket) {
          should.not.exist(err);
          res.statusCode.should.eql(200);
          return done();
        });
      });
    });
    return describe('/api/tickets/:id/giveup', function() {
      return it("giveup a task", function(done) {
        var options;
        options = {
          method: 'POST',
          auth: config.basicAuth,
          url: "" + HOST + "/api/tickets/new",
          json: {
            title: "title of ticket " + TIMESTAMP + " - 2",
            owner_id: "admin",
            category: "test api",
            content: {
              detailed: "content of ticket",
              mixed: ["data"]
            }
          }
        };
        return request(options, function(err, res, ticket) {
          should.not.exist(err);
          res.statusCode.should.eql(200);
          options = {
            method: 'PUT',
            url: "" + HOST + "/api/tickets/" + ticket._id + "/giveup",
            auth: config.basicAuth,
            json: {
              name: "worker"
            }
          };
          return request(options, function(err, res, ticket) {
            should.not.exist(err);
            res.statusCode.should.eql(200);
            return done();
          });
        });
      });
    });
  });

}).call(this);
