// Generated by CoffeeScript 1.6.3
/*
# test for models_ticket
*/


(function() {
  var SAMPLE_CONTENT_1, SAMPLE_TITLE_1, STATUS, Ticket, config, mongoose, should;

  should = require("should");

  STATUS = require("../enums/ticket_status");

  config = require("./config");

  mongoose = require('mongoose');

  mongoose.connect(config.db);

  mongoose.set('debug', true);

  require("../models/ticket");

  Ticket = mongoose.model('Ticket');

  SAMPLE_TITLE_1 = "test models/ticket";

  SAMPLE_CONTENT_1 = {
    itema: "is string",
    itemb: {
      sub: "content",
      sub2: "still"
    },
    itemc: [1, 2, "three"],
    itemd: true
  };

  describe("test", function() {
    after(function(done) {
      return mongoose.connection.db.dropCollection('tickets', done);
    });
    return describe("models/ticket", function() {
      it("should able create doc", function(done) {
        var ticket;
        ticket = new Ticket({
          title: SAMPLE_TITLE_1,
          owner_id: 'test',
          content: SAMPLE_CONTENT_1
        });
        return ticket.save(function(err) {
          should.not.exist(err);
          return done();
        });
      });
      it("should not allow alive ticket with duplicated title", function(done) {
        var ticket;
        ticket = new Ticket({
          title: SAMPLE_TITLE_1,
          owner_id: 'test',
          content: SAMPLE_CONTENT_1
        });
        return ticket.save(function(err) {
          console.log("[models_ticket_test] err:" + err);
          should.exist(err);
          return done();
        });
      });
      return it("should able to complete ticket", function(done) {
        return Ticket.changeStatus({
          title: SAMPLE_TITLE_1
        }, STATUS.COMPLETE, function(err, ticket) {
          console.log("[models_ticket_test] err:" + err + ", ticket:%j", ticket);
          should.not.exist(err);
          should.exist(ticket);
          ticket.status.should.eql(STATUS.COMPLETE);
          return done();
        });
      });
    });
  });

}).call(this);
