// Generated by CoffeeScript 1.6.3
/*
# test for ticket_worker
*/


(function() {
  var HOST, TicketManager, TicketWorker, WORKER_RECORD, assert, config, debuglog, request, setTicketWorker, should, ticketManager, ticketWorker;

  should = require("should");

  request = require("request");

  TicketWorker = require("../ticket_worker");

  TicketManager = require("../ticket_manager");

  debuglog = require("debug")("ticketman:test:ticket_worker_test");

  assert = require("assert");

  config = require("../config/config")['development'];

  WORKER_RECORD = null;

  TicketManager = require("../ticket_manager");

  ticketManager = new TicketManager("test ticket_manager", "http://localhost:3456");

  ticketWorker = null;

  setTicketWorker = function(val) {
    return ticketWorker = val;
  };

  ticketManager = new TicketManager("test ticket_manager", "http://localhost:3456");

  HOST = "http://localhost:3456";

  describe("test ticket_worker", function() {
    before(function(done) {
      var options;
      options = {
        method: 'POST',
        url: "" + HOST + "/workers/new.json",
        auth: config.basicAuth,
        json: {
          name: "test#" + (Date.now().toString(36)),
          desc: "just for test"
        }
      };
      return request(options, function(err, res, body) {
        debuglog("err:" + err + ", res.statusCode:" + res.statusCode + ", body:%j", body);
        assert.equal(err, null);
        assert.equal(res.statusCode, 200);
        assert.notEqual(body, null);
        body.id = body._id;
        WORKER_RECORD = body;
        WORKER_RECORD.host = HOST;
        WORKER_RECORD.basicAuth = config.basicAuth;
        WORKER_RECORD.category = "sample";
        WORKER_RECORD.interval = 300;
        WORKER_RECORD.timeout = 10000;
        ticketWorker = new TicketWorker(WORKER_RECORD);
        return done();
      });
    });
    return describe("ticket_worker", function() {
      this.timeout(30 * 1000);
      return it("live cycle", function(done) {
        ticketWorker.on("timeout", function() {
          debuglog("ticketWorker.on 'timeout'");
          return done();
        });
        ticketWorker.on("new ticket", function(ticket) {
          debuglog("ticketWorker.on 'new ticket', ticket:%j", ticket);
          should.exist(ticket);
          ticketWorker.isBusy().should.be.ok;
          setTimeout((function() {
            return ticketWorker.update("test update 1");
          }), 1000);
          setTimeout((function() {
            return ticketWorker.update("test update 2", "info");
          }), 2000);
          setTimeout((function() {
            return ticketWorker.update("test update 3", "warning");
          }), 3000);
          setTimeout((function() {
            return ticketWorker.update("test update 4", "danger");
          }), 4000);
          return setTimeout((function() {
            return ticketWorker.update("test update 5", "success");
          }), 5000);
        });
        ticketWorker.isBusy().should.not.be.ok;
        return ticketManager.issue("test ticket worker " + (Date.now()), "sample", {
          some: "content"
        }, function(err, ticket) {
          debuglog("err:" + err + ", ticket:%j", ticket);
          should.not.exist(err);
          return should.exist(ticket);
        });
      });
    });
  });

}).call(this);
